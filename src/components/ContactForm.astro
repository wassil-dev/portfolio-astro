---
// Contact form with validation
---

<div class="w-full">
  <form id="contact-form" class="space-y-4 md:space-y-6">
    <!-- Name Field -->
    <div>
      <label for="name" class="block text-sm font-medium mb-2">
        Name <span class="text-destructive">*</span>
      </label>
      <input
        type="text"
        id="name"
        name="name"
        required
        class="w-full px-4 py-3 bg-background border-2 border-border rounded-lg focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all"
        placeholder="Your name"
      />
      <p class="text-destructive text-sm mt-1 hidden" id="name-error"></p>
    </div>

    <!-- Email Field -->
    <div>
      <label for="email" class="block text-sm font-medium mb-2">
        Email <span class="text-destructive">*</span>
      </label>
      <input
        type="email"
        id="email"
        name="email"
        required
        class="w-full px-4 py-3 bg-background border-2 border-border rounded-lg focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all"
        placeholder="your.email@example.com"
      />
      <p class="text-destructive text-sm mt-1 hidden" id="email-error"></p>
    </div>

    <!-- Subject Field -->
    <div>
      <label for="subject" class="block text-sm font-medium mb-2">
        Subject <span class="text-destructive">*</span>
      </label>
      <input
        type="text"
        id="subject"
        name="subject"
        required
        class="w-full px-4 py-3 bg-background border-2 border-border rounded-lg focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all"
        placeholder="What's this about?"
      />
      <p class="text-destructive text-sm mt-1 hidden" id="subject-error"></p>
    </div>

    <!-- Message Field -->
    <div>
      <label for="message" class="block text-sm font-medium mb-2">
        Message <span class="text-destructive">*</span>
      </label>
      <textarea
        id="message"
        name="message"
        required
        rows="6"
        class="w-full px-4 py-3 bg-background border-2 border-border rounded-lg focus:border-primary focus:ring-2 focus:ring-primary/20 outline-none transition-all resize-none"
        placeholder="Tell me what you're thinking..."
      ></textarea>
      <p class="text-destructive text-sm mt-1 hidden" id="message-error"></p>
    </div>

    <!-- Submit Button -->
    <div class="flex gap-4">
      <button
        type="submit"
        class="flex-1 px-6 py-3 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-all font-medium shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <span class="submit-text">Send Message</span>
        <span class="loading-text hidden">Sending...</span>
      </button>
      <button
        type="reset"
        class="px-6 py-3 bg-secondary text-secondary-foreground rounded-lg hover:bg-secondary/80 transition-all font-medium border-2 border-border"
      >
        Reset
      </button>
    </div>

    <!-- Success/Error Messages -->
    <div id="form-message" class="hidden p-4 rounded-lg"></div>
  </form>
</div>

<script>
  const form = document.getElementById('contact-form') as HTMLFormElement;
  const formMessage = document.getElementById('form-message');

  // Validation patterns
  const patterns = {
    name: /^[a-zA-Z\s]{2,50}$/,
    email: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
    subject: /^.{3,100}$/,
    message: /^.{10,1000}$/,
  };

  // Error messages
  const errorMessages = {
    name: 'Please enter a valid name (2-50 characters, letters only)',
    email: 'Please enter a valid email address',
    subject: 'Subject must be 3-100 characters',
    message: 'Message must be 10-1000 characters',
  };

  // Validate field
  function validateField(fieldName: string, value: string): boolean {
    const pattern = patterns[fieldName as keyof typeof patterns];
    const errorElement = document.getElementById(`${fieldName}-error`);
    const inputElement = document.getElementById(fieldName);

    if (!pattern.test(value)) {
      errorElement?.classList.remove('hidden');
      errorElement!.textContent = errorMessages[fieldName as keyof typeof errorMessages];
      inputElement?.classList.add('border-destructive');
      return false;
    } else {
      errorElement?.classList.add('hidden');
      inputElement?.classList.remove('border-destructive');
      return true;
    }
  }

  // Real-time validation
  ['name', 'email', 'subject', 'message'].forEach(fieldName => {
    const field = document.getElementById(fieldName) as HTMLInputElement | HTMLTextAreaElement;
    field?.addEventListener('blur', () => {
      validateField(fieldName, field.value);
    });
  });

  // Form submission
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Validate all fields
    const formData = new FormData(form);
    let isValid = true;

    ['name', 'email', 'subject', 'message'].forEach(fieldName => {
      const value = formData.get(fieldName) as string;
      if (!validateField(fieldName, value)) {
        isValid = false;
      }
    });

    if (!isValid) {
      showMessage('Please fix the errors above', 'error');
      return;
    }

    // Show loading state
    const submitBtn = form.querySelector('button[type="submit"]') as HTMLButtonElement;
    const submitText = submitBtn?.querySelector('.submit-text');
    const loadingText = submitBtn?.querySelector('.loading-text');

    submitBtn.disabled = true;
    submitText?.classList.add('hidden');
    loadingText?.classList.remove('hidden');

    // Simulate form submission (replace with actual endpoint)
    try {
      // Replace this with your actual form submission logic
      // For example: await fetch('/api/contact', { method: 'POST', body: formData })

      await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate API call

      // For now, we'll create a mailto link as fallback
      const name = formData.get('name');
      const email = formData.get('email');
      const subject = formData.get('subject');
      const message = formData.get('message');

      const mailtoLink = `mailto:your-email@example.com?subject=${encodeURIComponent(subject as string)}&body=${encodeURIComponent(`From: ${name} (${email})\n\n${message}`)}`;
      window.location.href = mailtoLink;

      showMessage('Message sent successfully! Opening your email client...', 'success');
      form.reset();
    } catch (error) {
      showMessage('Failed to send message. Please try again.', 'error');
    } finally {
      submitBtn.disabled = false;
      submitText?.classList.remove('hidden');
      loadingText?.classList.add('hidden');
    }
  });

  // Show message
  function showMessage(message: string, type: 'success' | 'error') {
    if (!formMessage) return;

    formMessage.textContent = message;
    formMessage.classList.remove('hidden', 'bg-primary/10', 'text-primary', 'bg-destructive/10', 'text-destructive');

    if (type === 'success') {
      formMessage.classList.add('bg-primary/10', 'text-primary', 'border', 'border-primary/30');
    } else {
      formMessage.classList.add('bg-destructive/10', 'text-destructive', 'border', 'border-destructive/30');
    }

    // Hide after 5 seconds
    setTimeout(() => {
      formMessage.classList.add('hidden');
    }, 5000);
  }

  // Reset button
  form?.addEventListener('reset', () => {
    // Clear all error messages
    ['name', 'email', 'subject', 'message'].forEach(fieldName => {
      const errorElement = document.getElementById(`${fieldName}-error`);
      const inputElement = document.getElementById(fieldName);
      errorElement?.classList.add('hidden');
      inputElement?.classList.remove('border-destructive');
    });
    formMessage?.classList.add('hidden');
  });
</script>
